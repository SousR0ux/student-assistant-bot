# -*- coding: utf-8 -*-

import os, io, csv, time, html
import logging
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import (
    Application, CommandHandler, ContextTypes, ConversationHandler,
    MessageHandler, CallbackQueryHandler, filters, PicklePersistence
)
from telegram.helpers import escape_markdown
from telegram.error import BadRequest

# ===== .env / .evn =====
try:
    from dotenv import load_dotenv, find_dotenv
    load_dotenv(find_dotenv(filename=".env", raise_error_if_not_found=False))
    if os.path.exists(".evn"):
        load_dotenv(".evn")
except Exception:
    pass

# ===== CONFIG =====
BOT_TOKEN        = os.getenv("BOT_TOKEN")
GEMINI_API_KEY   = os.getenv("GEMINI_API_KEY")
ADMIN_CHAT_ID    = os.getenv("ADMIN_CHAT_ID")
FREE_LIMIT       = int(os.getenv("FREE_LIMIT", "5"))
RL_WINDOW_SEC    = int(os.getenv("RL_WINDOW_SEC", "10"))  # —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –æ–∫–Ω–æ
RL_MAX_HITS      = int(os.getenv("RL_MAX_HITS", "3"))     # –º–∞–∫—Å. –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–∫–Ω–µ
CAPTCHA_ENABLED  = os.getenv("CAPTCHA_ENABLED", "1") == "1"

# –†–µ—Ñ–µ—Ä–∞–ª—ã
REF_BONUS_DAYS         = int(os.getenv("REF_BONUS_DAYS", "1"))   # –Ω–∞–≥—Ä–∞–¥–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä—É (–≤ –¥–Ω—è—Ö –±–µ–∑–ª–∏–º–∏—Ç–∞)
REF_WELCOME_ATTEMPTS   = int(os.getenv("REF_WELCOME_ATTEMPTS", "2"))  # –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–º—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–∫ –ª–∏–º–∏—Ç—É)

def _parse_admin(s: Optional[str]) -> Optional[int]:
    try:
        return int(s) if s else None
    except Exception:
        return None

ADMIN_USER_ID: Optional[int] = _parse_admin(ADMIN_CHAT_ID)

# ===== LOGS =====
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== STATES =====
(
    MAIN_MENU, REWRITER_TEXT_INPUT, LITERATURE_TOPIC_INPUT, GOST_MENU,
    ADMIN_MENU, ADMIN_RESET_WAIT_ID, ADMIN_ADDSUB_WAIT_ID, ADMIN_ADDSUB_WAIT_DAYS,
    ADMIN_STATUS_WAIT_ID, ADMIN_DELSUB_WAIT_ID,
    CABINET_MENU, CAPTCHA_WAIT,
    SETTINGS_MENU, SETTINGS_TONE_WAIT, SETTINGS_GOST_WAIT,
    ADMIN_SEARCH_WAIT_QUERY, ADMIN_TAGS_WAIT_ID, ADMIN_TAGS_WAIT_VALUE,
    ADMIN_BROADCAST_SEGMENT, ADMIN_BROADCAST_WAIT_TEXT,
    ADMIN_SETLIMIT_WAIT_ID, ADMIN_SETLIMIT_WAIT_VALUES,
    ADMIN_BLACKLIST_WAIT_ID, ADMIN_SHADOW_WAIT_ID,
    CABINET_REF_MENU
) = range(25)

# ===== HELPERS: dates/roles =====
def _today() -> str: return datetime.now().strftime("%Y-%m-%d")
def is_admin(uid: int) -> bool: return ADMIN_USER_ID is not None and uid == ADMIN_USER_ID

def has_active_subscription(context: ContextTypes.DEFAULT_TYPE) -> bool:
    exp = context.user_data.get("subscription_expires")
    if not exp: return False
    try:
        return datetime.strptime(exp, "%Y-%m-%d").date() >= datetime.now().date()
    except Exception:
        return False

# ===== LIMITS (—Å —É—á—ë—Ç–æ–º –¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞) =====
def _limit_bonus_today(context: ContextTypes.DEFAULT_TYPE) -> int:
    lb = context.user_data.get("limit_bonus")
    if not lb or lb.get("date") != _today():
        context.user_data["limit_bonus"] = {"date": _today(), "extra": 0}
        return 0
    return int(lb.get("extra", 0))

def add_daily_bonus(context: ContextTypes.DEFAULT_TYPE, extra: int) -> None:
    lb = context.user_data.get("limit_bonus")
    if not lb or lb.get("date") != _today():
        context.user_data["limit_bonus"] = {"date": _today(), "extra": max(0, int(extra))}
    else:
        lb["extra"] = max(0, int(lb.get("extra", 0))) + max(0, int(extra))
        context.user_data["limit_bonus"] = lb

def get_daily_limit(context: ContextTypes.DEFAULT_TYPE) -> int:
    return FREE_LIMIT + _limit_bonus_today(context)

def get_user_usage(feature: str, context: ContextTypes.DEFAULT_TYPE) -> int:
    u = context.user_data.setdefault("usage", {})
    d = u.get(feature, {"count": 0, "date": _today()})
    if d.get("date") != _today():
        d = {"count": 0, "date": _today()}
        u[feature] = d
    return int(d.get("count", 0))

def increment_usage(feature: str, context: ContextTypes.DEFAULT_TYPE) -> int:
    u = context.user_data.setdefault("usage", {})
    d = u.get(feature, {"count": 0, "date": _today()})
    if d.get("date") != _today():
        d = {"count": 1, "date": _today()}
    else:
        d["count"] = int(d.get("count", 0)) + 1
        d["date"] = _today()
    u[feature] = d
    return d["count"]

def remaining_attempts(feature: str, context: ContextTypes.DEFAULT_TYPE, uid: int) -> str:
    if is_admin(uid) or has_active_subscription(context):
        return "‚àû (–ë–µ–∑–ª–∏–º–∏—Ç)"
    limit = get_daily_limit(context)
    return str(max(0, limit - get_user_usage(feature, context)))

# ===== HISTORY + analytics =====
def _push_history(context: ContextTypes.DEFAULT_TYPE, feature: str, size: int) -> None:
    hist: List[Dict[str, Any]] = context.user_data.setdefault("history", [])
    hist.append({"ts": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                 "feature": feature, "size": int(size)})
    if len(hist) > 100: del hist[:-100]

def _format_history(context: ContextTypes.DEFAULT_TYPE, limit: int = 10) -> str:
    hist: List[Dict[str, Any]] = context.user_data.get("history", [])
    if not hist: return "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏."
    return "\n".join(f"‚Ä¢ {i['ts']}: {i['feature']} (–¥–ª–∏–Ω–∞ –≤–≤–æ–¥–∞: {i['size']})"
                     for i in list(reversed(hist))[:limit])

def _record_ai_stat(application: Application, ok: bool) -> None:
    stats = application.bot_data.setdefault("ai_stats", [])
    stats.append({"ts": int(time.time()), "ok": bool(ok)})
    if len(stats) > 200: del stats[:-200]

def _service_snapshot(application: Application, n: int = 50) -> Dict[str, Any]:
    stats = application.bot_data.get("ai_stats", [])
    subset = stats[-n:] if n>0 else stats[:]
    if not subset: return {"count": 0, "error_rate": 0.0}
    errs = sum(1 for x in subset if not x.get("ok"))
    return {"count": len(subset), "error_rate": round(errs/len(subset)*100, 1)}

# ===== Captcha / Anti-spam / Blacklist =====
def _touch_seen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data["last_seen"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    u = update.effective_user
    if u:
        context.user_data["last_username"] = (u.username or "")[:64]
        context.user_data["first_name"] = (u.first_name or "")[:128]
        context.user_data["last_name"] = (u.last_name or "")[:128]

def _is_blacklisted(app: Application, uid: int) -> bool:
    bl = app.bot_data.get("blacklist", set())
    return uid in bl

def _is_shadowbanned(app: Application, uid: int) -> bool:
    sb = app.bot_data.get("shadowban", set())
    return uid in sb

def _rate_limit_ok(context: ContextTypes.DEFAULT_TYPE) -> tuple[bool, int]:
    now = time.time()
    arr: List[float] = context.user_data.setdefault("rl_times", [])
    arr = [t for t in arr if now - t <= RL_WINDOW_SEC]
    ok = len(arr) < RL_MAX_HITS
    if ok:
        arr.append(now)
        context.user_data["rl_times"] = arr
        return True, 0
    wait = RL_WINDOW_SEC - int(now - min(arr))
    return False, max(wait, 1)

def _need_captcha(context: ContextTypes.DEFAULT_TYPE, uid: int) -> bool:
    if not CAPTCHA_ENABLED: return False
    if is_admin(uid): return False
    return not context.user_data.get("captcha_ok", False)

def _gen_captcha(context: ContextTypes.DEFAULT_TYPE) -> str:
    import random
    a, b = random.randint(2, 9), random.randint(2, 9)
    context.user_data["captcha_answer"] = str(a + b)
    return f"–ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {a} + {b}? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º."

# ===== Gemini =====
async def call_gemini(prompt: str) -> str:
    if not GEMINI_API_KEY:
        return "–û—à–∏–±–∫–∞: API-–∫–ª—é—á –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    api_url = ("https://generativelanguage.googleapis.com/v1beta/models/"
               "gemini-2.5-flash-preview-05-20:generateContent"
               f"?key={GEMINI_API_KEY}")
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    try:
        from httpx import AsyncClient
        async with AsyncClient() as client:
            r = await client.post(api_url, json=payload, timeout=60.0)
            r.raise_for_status()
            j = r.json()
            cand = j.get("candidates", [])
            if cand and cand[0].get("content", {}).get("parts"):
                return cand[0]["content"]["parts"][0]["text"]
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}"

def _no_literature_found(txt: str) -> bool:
    s = (txt or "").strip()
    if not s: return True
    low = s.lower()
    if low.startswith(("–æ—à–∏–±–∫–∞", "–Ω–µ —É–¥–∞–ª–æ—Å—å")): return True
    if any(x in low for x in ["–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "no sources"]): return True
    if s.count("\n") <= 1 and len(s) < 60: return True
    return False

# ===== Keyboards =====
def main_menu_kb(uid: int) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("‚úçÔ∏è AI-–†–µ—Ä–∞–π—Ç–µ—Ä (–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å)", callback_data="rewriter")],
        [InlineKeyboardButton("üìö –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã", callback_data="literature")],
        [InlineKeyboardButton("üìã –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ì–û–°–¢—É", callback_data="gost")],
        [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet")],
    ]
    if is_admin(uid):
        rows.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    return InlineKeyboardMarkup(rows)

def back_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")]])

def contact_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É", url="https://t.me/V_L_A_D_IS_L_A_V")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")]
    ])

def cabinet_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üóÇ –ò—Å—Ç–æ—Ä–∏—è (10)", callback_data="cab_history")],
        [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ (CSV)", callback_data="cab_export")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="cab_settings")],
        [InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="cab_ref")],
        [InlineKeyboardButton("üî• –ü–æ–ª—É—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç", url="https://t.me/V_L_A_D_IS_L_A_V")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="cab_refresh")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")],
    ])

def admin_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÅ –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã", callback_data="admin_reset"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_status")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_addsub"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_delsub")],
        [InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search"),
         InlineKeyboardButton("üè∑ –¢–µ–≥–∏", callback_data="admin_tags")],
        [InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
         InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="admin_export")],
        [InlineKeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞", callback_data="admin_blacklist"),
         InlineKeyboardButton("üëª –¢–µ–Ω–µ–≤–æ–π –±–∞–Ω", callback_data="admin_shadow")],
        [InlineKeyboardButton("üéö –ó–∞–¥–∞—Ç—å –ª–∏–º–∏—Ç—ã", callback_data="admin_setlimit")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
    ])

def admin_cancel_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back_to_main_menu")],
    ])

def settings_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üó£ –¢–æ–Ω —Ä–µ—Ä–∞–π—Ç–∞", callback_data="set_tone")],
        [InlineKeyboardButton("üìè –ì–û–°–¢ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="set_gost")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cabinet")],
    ])

# ===== Utils =====
TG_MD2_LIMIT = 3800
def _chunk_md2(text: str, limit: int = TG_MD2_LIMIT) -> List[str]:
    chunks, buf = [], ""
    for line in text.splitlines(keepends=True):
        while len(line) > limit:
            head, line = line[:limit], line[limit:]
            if buf: chunks.append(buf); buf = ""
            chunks.append(head)
        if len(buf) + len(line) > limit:
            if buf: chunks.append(buf)
            buf = line
        else:
            buf += line
    if buf: chunks.append(buf)
    return chunks or ["_–ø—É—Å—Ç–æ_"]

async def _md2_send_chunks(msg, text: str, markup=None):
    parts = _chunk_md2(text, TG_MD2_LIMIT)
    if len(parts) == 1:
        await msg.edit_text(parts[0], parse_mode="MarkdownV2",
                            disable_web_page_preview=True, reply_markup=markup)
    else:
        await msg.edit_text(parts[0], parse_mode="MarkdownV2", disable_web_page_preview=True)
        for p in parts[1:-1]:
            await msg.reply_text(p, parse_mode="MarkdownV2", disable_web_page_preview=True)
        await msg.reply_text(parts[-1], parse_mode="MarkdownV2",
                             disable_web_page_preview=True, reply_markup=markup)

def _progress_bar(used: int, total: int, width: int = 20) -> str:
    if total <= 0: return "‚ñë"*width + " ‚àû"
    used = max(0, min(total, used))
    fill = int(width * used / total)
    return "‚ñà"*fill + "‚ñë"*(width - fill) + f" {used}/{total}"

def _ensure_first_seen(context: ContextTypes.DEFAULT_TYPE) -> None:
    if "first_seen" not in context.user_data:
        context.user_data["first_seen"] = _today()

async def _safe_edit_text(message, text: str, **kwargs):
    try:
        await message.edit_text(text, **kwargs)
    except BadRequest as e:
        if "not modified" in str(e).lower():
            await message.reply_text(text, **kwargs)
        else:
            raise

async def _ensure_bot_username(context: ContextTypes.DEFAULT_TYPE) -> str:
    name = context.application.bot_data.get("bot_username")
    if name:
        return name
    me = await context.bot.get_me()
    context.application.bot_data["bot_username"] = me.username
    return me.username

# ===== REFERRALS helpers =====
def _parse_ref_payload(args: List[str]) -> Optional[int]:
    if not args:
        return None
    payload = " ".join(args).strip()
    if payload.startswith("ref_"):
        suf = payload[4:]
        if suf.isdigit():
            return int(suf)
    return None

def _award_or_queue_bonus_for_referrer(context: ContextTypes.DEFAULT_TYPE, ref_id: int) -> Optional[str]:
    ud_map = context.application.user_data
    today = datetime.now().date()
    if ref_id in ud_map:
        ud = ud_map[ref_id]
        cur = ud.get("subscription_expires")
        if cur:
            try:
                cur_d = datetime.strptime(cur, "%Y-%m-%d").date()
            except Exception:
                cur_d = today
        else:
            cur_d = today
        base = max(cur_d, today)
        new_exp = base + timedelta(days=REF_BONUS_DAYS)
        ud["subscription_expires"] = new_exp.strftime("%Y-%m-%d")
        return new_exp.strftime("%d.%m.%Y")
    pending = context.application.bot_data.setdefault("ref_pending_days", {})
    pending[ref_id] = int(pending.get(ref_id, 0)) + REF_BONUS_DAYS
    return None

def _queue_ref_for_referrer(context: ContextTypes.DEFAULT_TYPE, ref_id: int, new_user_id: int) -> None:
    ud_map = context.application.user_data
    if ref_id in ud_map:
        refs = ud_map[ref_id].setdefault("refs", [])
        if new_user_id not in refs:
            refs.append(new_user_id)
    else:
        refs_map = context.application.bot_data.setdefault("referrals", {})
        lst = refs_map.setdefault(ref_id, [])
        if new_user_id not in lst:
            lst.append(new_user_id)

async def _apply_pending_for_current_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    uid = update.effective_user.id
    bd = context.application.bot_data

    pending_days = 0
    ref_pending = bd.get("ref_pending_days", {})
    if uid in ref_pending:
        pending_days = int(ref_pending.pop(uid, 0))

    if pending_days > 0:
        today = datetime.now().date()
        cur = context.user_data.get("subscription_expires")
        if cur:
            try:
                cur_d = datetime.strptime(cur, "%Y-%m-%d").date()
            except Exception:
                cur_d = today
        else:
            cur_d = today
        base = max(cur_d, today)
        new_exp = base + timedelta(days=pending_days)
        context.user_data["subscription_expires"] = new_exp.strftime("%Y-%m-%d")
        try:
            await context.bot.send_message(
                chat_id=uid,
                text=f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{pending_days} –¥. –±–µ–∑–ª–∏–º–∏—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º.\n"
                     f"–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {new_exp.strftime('%d.%m.%Y')} –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ."
            )
        except Exception:
            pass

    refs_map = bd.get("referrals", {})
    if uid in refs_map:
        pending_refs = refs_map.pop(uid, [])
        ud_refs = context.user_data.setdefault("refs", [])
        for r in pending_refs:
            if r not in ud_refs:
                ud_refs.append(r)

# ===== /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    _touch_seen(update, context)
    uid = update.effective_user.id

    ref_from = None
    if update.message and context.args:
        ref_from = _parse_ref_payload(context.args)

    _ensure_first_seen(context)
    await _apply_pending_for_current_user(update, context)

    if ref_from and ref_from != uid and not context.user_data.get("ref_by"):
        context.user_data["ref_by"] = ref_from
        context.user_data["referred_at"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        if REF_WELCOME_ATTEMPTS > 0:
            add_daily_bonus(context, REF_WELCOME_ATTEMPTS)

        _queue_ref_for_referrer(context, ref_from, uid)
        new_exp_h = _award_or_queue_bonus_for_referrer(context, ref_from)

        try:
            if new_exp_h:
                await context.bot.send_message(
                    chat_id=ref_from,
                    text=(f"üéâ –í–∞—à –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {uid} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.\n"
                          f"–ù–∞—á–∏—Å–ª–µ–Ω–æ +{REF_BONUS_DAYS} –¥. –±–µ–∑–ª–∏–º–∏—Ç–∞. –î–æ—Å—Ç—É–ø –¥–æ {new_exp_h} –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.")
                )
        except Exception:
            pass
        try:
            if REF_WELCOME_ATTEMPTS > 0:
                await update.effective_message.reply_text(
                    f"üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{REF_WELCOME_ATTEMPTS} –¥–æ–ø. –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
                )
        except Exception:
            pass

    if _is_blacklisted(context.application, uid):
        await update.effective_message.reply_html("üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        return ConversationHandler.END
    if _is_shadowbanned(context.application, uid):
        await update.effective_message.reply_text("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    if _need_captcha(context, uid):
        q = _gen_captcha(context)
        await update.effective_message.reply_text(q)
        return CAPTCHA_WAIT

    text = (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.effective_user.mention_html()}!\n\n"
            "–Ø ¬´–°—Ç—É–¥–µ–Ω—Ç-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:")
    if update.callback_query:
        await update.callback_query.answer()
        await _safe_edit_text(update.callback_query.message, text, parse_mode="HTML", reply_markup=main_menu_kb(uid))
    else:
        await update.effective_message.reply_html(text, reply_markup=main_menu_kb(uid))
    return MAIN_MENU

# ===== CAPTCHA =====
async def captcha_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    ans = (update.message.text or "").strip()
    ok = context.user_data.get("captcha_answer")
    if ans == ok:
        context.user_data["captcha_ok"] = True
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
        return await start(update, context)
    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. " + _gen_captcha(context))
    return CAPTCHA_WAIT

# ===== HELP & SUPPORT =====
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    t = (
        "üìñ –ü–æ–º–æ—â—å\n\n"
        "‚Ä¢ /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /status ‚Äî –≤–∞—à –¥–æ—Å—Ç—É–ø –∏ –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–ø—ã—Ç–æ–∫\n"
        "‚Ä¢ /settings ‚Äî –ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚Ä¢ /report <—Å–æ–æ–±—â–µ–Ω–∏–µ> ‚Äî –∂–∞–ª–æ–±–∞ —Å –ª–æ–≥–∞–º–∏\n"
        "‚Ä¢ /service ‚Äî —Å—Ç–∞—Ç—É—Å –ò–ò\n\n"
        "–î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤: @V_L_A_D_IS_L_A_V"
    )
    await update.message.reply_text(t)

async def service_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    snap = _service_snapshot(context.application, 50)
    await update.message.reply_html(
        f"ü©∫ <b>–°—Ç–∞—Ç—É—Å</b>\n–ü–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {snap['count']}\n–û—à–∏–±–∫–∞ –ò–ò: {snap['error_rate']}%\n"
        "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤—ã—Å–æ–∫–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏/—Å–±–æ–∏.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: <a href='https://t.me/V_L_A_D_IS_L_A_V'>@V_L_A_D_IS_L_A_V</a>"
    )

async def report_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = (update.message.text or "").partition(" ")[2].strip()
    if not ADMIN_USER_ID:
        await update.message.reply_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return
    last_req = context.user_data.get("last_request", {})
    hist = _format_history(context, limit=5)
    uname = f"@{(update.effective_user.username or '').strip()}" if update.effective_user.username else "‚Äî"
    html_msg = (
        f"üõé <b>–ñ–∞–ª–æ–±–∞</b>\n"
        f"ID: <code>{update.effective_user.id}</code>\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: {html.escape(uname)}\n"
        f"–¢–µ–∫—Å—Ç: {html.escape(msg) or '‚Äî'}\n\n"
        f"<b>Last request:</b> {html.escape(str(last_req))}\n\n"
        f"<b>History(5):</b>\n{html.escape(hist)}"
    )
    try:
        await context.bot.send_message(chat_id=ADMIN_USER_ID, text=html_msg, parse_mode="HTML")
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.warning("report send fail: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç. –ù–∞–ø–∏—à–∏—Ç–µ @V_L_A_D_IS_L_A_V")

# ===== ADMIN COMMANDS (text) =====
async def reset_limit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    try: target_id = int(context.args[0])
    except Exception:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reset <user_id>")
        return
    ud = context.application.user_data.get(target_id)
    if not ud:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    today = _today()
    usage = ud.setdefault("usage", {})
    usage["rewriter"] = {"count": 0, "date": today}
    usage["literature"] = {"count": 0, "date": today}
    await update.message.reply_text("‚úÖ –°–±—Ä–æ—à–µ–Ω–æ.")
    try: await context.bot.send_message(chat_id=target_id, text="üéâ –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception: pass

async def add_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    try:
        target_id = int(context.args[0]); days = int(context.args[1]); assert days>0
    except Exception:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addsub <user_id> <days>")
        return
    ud = context.application.user_data.get(target_id)
    if not ud: await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
    exp = (datetime.now().date() + timedelta(days=days)).strftime("%Y-%m-%d")
    ud["subscription_expires"] = exp
    exp_h = datetime.strptime(exp,'%Y-%m-%d').strftime('%d.%m.%Y')
    await update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {exp_h}")
    try: await context.bot.send_message(chat_id=target_id, text=f"üéâ –í–∞–º –≤—ã–¥–∞–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ {days} –¥–Ω. –î–æ—Å—Ç—É–ø –¥–æ {exp_h} –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.")
    except Exception: pass

async def del_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    try: target_id = int(context.args[0])
    except Exception: await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delsub <user_id>"); return
    ud = context.application.user_data.get(target_id)
    if not ud: await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
    if "subscription_expires" in ud:
        ud.pop("subscription_expires", None); await update.message.reply_text("üõë –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        try: await context.bot.send_message(chat_id=target_id, text="üõë –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        except Exception: pass
    else:
        await update.message.reply_text("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    uid = update.effective_user.id
    if has_active_subscription(context):
        exp = datetime.strptime(context.user_data.get("subscription_expires"), "%Y-%m-%d").strftime("%d.%m.%Y")
        await update.message.reply_html(f"<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç –¥–æ {exp}")
    else:
        limit = get_daily_limit(context)
        r = remaining_attempts("rewriter", context, uid)
        l = remaining_attempts("literature", context, uid)
        await update.message.reply_html(
            "<b>–°—Ç–∞—Ç—É—Å:</b> –±–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø\n"
            f"‚Ä¢ –†–µ—Ä–∞–π—Ç–µ—Ä: {r} –∏–∑ {limit}\n"
            f"‚Ä¢ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞: {l} –∏–∑ {limit}"
        )

# ===== ADMIN PANEL (callbacks + flows) =====
async def admin_panel_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not is_admin(update.effective_user.id):
        if update.callback_query: await update.callback_query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", show_alert=True)
        else: await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return MAIN_MENU
    if update.callback_query:
        await update.callback_query.answer()
        try:
            await update.callback_query.message.edit_text("‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", parse_mode="HTML", reply_markup=admin_menu_kb())
        except BadRequest as e:
            if "not modified" in str(e).lower():
                await update.callback_query.message.reply_html("‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=admin_menu_kb())
            else:
                raise
    else:
        await update.message.reply_html("‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=admin_menu_kb())
    return ADMIN_MENU

# reset
async def admin_reset_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await _safe_edit_text(update.callback_query.message,
                          "–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤:", parse_mode="HTML",
                          reply_markup=admin_cancel_kb())
    return ADMIN_RESET_WAIT_ID

async def admin_reset_receive_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try: target_id = int((update.message.text or "").strip())
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=admin_cancel_kb()); return ADMIN_RESET_WAIT_ID
    ud = context.application.user_data.get(target_id)
    if not ud:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_cancel_kb()); return ADMIN_MENU
    today = _today()
    u = ud.setdefault("usage", {})
    u["rewriter"]={"count":0,"date":today}; u["literature"]={"count":0,"date":today}
    await update.message.reply_text("‚úÖ –°–±—Ä–æ—à–µ–Ω–æ.", reply_markup=admin_cancel_kb())
    try:
        await context.bot.send_message(chat_id=target_id, text="üéâ –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –±—ã–ª —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass
    return ADMIN_MENU

# addsub
async def admin_addsub_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await _safe_edit_text(update.callback_query.message,
                          "–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", parse_mode="HTML",
                          reply_markup=admin_cancel_kb())
    return ADMIN_ADDSUB_WAIT_ID

async def admin_addsub_receive_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try: target_id = int((update.message.text or "").strip())
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=admin_cancel_kb()); return ADMIN_ADDSUB_WAIT_ID
    context.user_data["admin_addsub_target"] = target_id
    await update.message.reply_html(f"ID <code>{target_id}</code> –ø—Ä–∏–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–ª-–≤–æ –¥–Ω–µ–π</b>:", reply_markup=admin_cancel_kb())
    return ADMIN_ADDSUB_WAIT_DAYS

async def admin_addsub_receive_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try: days = int((update.message.text or "").strip()); assert days>0
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ.", reply_markup=admin_cancel_kb()); return ADMIN_ADDSUB_WAIT_DAYS
    target_id = context.user_data.get("admin_addsub_target")
    if target_id is None:
        await update.message.reply_text("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.", reply_markup=admin_cancel_kb()); return ADMIN_MENU
    ud = context.application.user_data.get(target_id)
    if not ud:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_cancel_kb()); return ADMIN_MENU
    exp = (datetime.now().date()+timedelta(days=days)).strftime("%Y-%m-%d")
    ud["subscription_expires"]=exp
    await update.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞.", reply_markup=admin_cancel_kb())
    try:
        exp_h = datetime.strptime(exp,'%Y-%m-%d').strftime('%d.%m.%Y')
        await context.bot.send_message(chat_id=target_id,
            text=f"üéâ –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ {days} –¥–Ω–µ–π.\n–î–æ—Å—Ç—É–ø –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {exp_h} –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.")
    except Exception:
        pass
    context.user_data.pop("admin_addsub_target", None)
    return ADMIN_MENU

# delsub
async def admin_delsub_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await _safe_edit_text(update.callback_query.message,
                          "–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:", parse_mode="HTML",
                          reply_markup=admin_cancel_kb())
    return ADMIN_DELSUB_WAIT_ID

async def admin_delsub_receive_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try: target_id = int((update.message.text or "").strip())
    except Exception:
        await update.message.reply_html("–ù–µ–≤–µ—Ä–Ω—ã–π ID.", reply_markup=admin_cancel_kb()); return ADMIN_DELSUB_WAIT_ID
    ud = context.application.user_data.get(target_id)
    if not ud:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_cancel_kb()); return ADMIN_MENU
    ud.pop("subscription_expires", None)
    await update.message.reply_text("üõë –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.", reply_markup=admin_cancel_kb())
    try:
        await context.bot.send_message(chat_id=target_id, text="üõë –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass
    return ADMIN_MENU

# status
async def admin_status_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await _safe_edit_text(update.callback_query.message,
                          "–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞:",
                          parse_mode="HTML", reply_markup=admin_cancel_kb())
    return ADMIN_STATUS_WAIT_ID

async def admin_status_receive_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try: target_id = int((update.message.text or "").strip())
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID.", reply_markup=admin_cancel_kb()); return ADMIN_STATUS_WAIT_ID
    ud = context.application.user_data.get(target_id)
    if not ud:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_cancel_kb()); return ADMIN_MENU
    exp = ud.get("subscription_expires")
    sub_line = f"–ü–æ–¥–ø–∏—Å–∫–∞: –¥–æ {datetime.strptime(exp,'%Y-%m-%d').strftime('%d.%m.%Y')}" if exp else "–ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ—Ç"
    usage = ud.get("usage", {})
    rew = usage.get("rewriter", {"count":0,"date":_today()})
    lit = usage.get("literature", {"count":0,"date":_today()})
    tags = ", ".join(ud.get("tags", [])) or "‚Äî"
    refs = ", ".join(str(x) for x in ud.get("refs", [])) or "‚Äî"
    await update.message.reply_html(
        f"üë§ <b>{target_id}</b>\n{sub_line}\n"
        f"–†–µ—Ä–∞–π—Ç–µ—Ä: {rew.get('count',0)} ({rew.get('date','-')})\n"
        f"–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞: {lit.get('count',0)} ({lit.get('date','-')})\n"
        f"–¢–µ–≥–∏: {html.escape(tags)}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—ã: {html.escape(refs)}",
        reply_markup=admin_cancel_kb()
    )
    return ADMIN_MENU

# search
async def admin_search_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await _safe_edit_text(update.callback_query.message,
                          "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ —á–∞—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞:", reply_markup=admin_cancel_kb())
    return ADMIN_SEARCH_WAIT_QUERY

async def admin_search_do(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = (update.message.text or "").strip().lower()
    res = []
    ud_map = context.application.user_data
    if q.isdigit():
        uid = int(q)
        if uid in ud_map:
            u = ud_map[uid]; res.append((uid, u.get("last_username",""), u.get("first_seen","?")))
    else:
        for uid, data in ud_map.items():
            if q in (data.get("last_username","").lower()):
                res.append((uid, data.get("last_username",""), data.get("first_seen","?")))
            if len(res) >= 20: break
    if not res:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=admin_cancel_kb()); return ADMIN_MENU
    lines = [f"‚Ä¢ {uid} @{name or '‚Äî'} (—Å {fs})" for uid,name,fs in res]
    await update.message.reply_text("–ù–∞–π–¥–µ–Ω–æ:\n" + "\n".join(lines), reply_markup=admin_cancel_kb())
    return ADMIN_MENU

# tags
async def admin_tags_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await _safe_edit_text(update.callback_query.message,
                          "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=admin_cancel_kb())
    return ADMIN_TAGS_WAIT_ID

async def admin_tags_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try: target = int((update.message.text or "").strip())
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID.", reply_markup=admin_cancel_kb()); return ADMIN_TAGS_WAIT_ID
    context.user_data["tags_target"] = target
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ç–µ–≥–æ–º –ø–æ—Å—Ç–∞–≤—å—Ç–µ -):\n"
                                    "–ø—Ä–∏–º–µ—Ä: vip, –±–ª–æ–≥–µ—Ä, -test", reply_markup=admin_cancel_kb())
    return ADMIN_TAGS_WAIT_VALUE

async def admin_tags_set(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    target = context.user_data.get("tags_target"); txt = (update.message.text or "").strip()
    if target is None:
        await update.message.reply_text("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.", reply_markup=admin_cancel_kb()); return ADMIN_MENU
    ud = context.application.user_data.get(target)
    if not ud:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_cancel_kb()); return ADMIN_MENU
    tags = [t.strip() for t in txt.split(",") if t.strip()]
    cur = set(ud.get("tags", []))
    for t in tags:
        if t.startswith("-"): cur.discard(t[1:].strip())
        else: cur.add(t)
    ud["tags"] = sorted([t for t in cur if t])
    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –¢–µ–≥–∏: {', '.join(ud['tags']) or '‚Äî'}", reply_markup=admin_cancel_kb())
    context.user_data.pop("tags_target", None)
    return ADMIN_MENU

# broadcast
async def admin_broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–í—Å–µ", callback_data="bseg_all"),
         InlineKeyboardButton("Free", callback_data="bseg_free"),
         InlineKeyboardButton("Pro", callback_data="bseg_subs"),
         InlineKeyboardButton("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 7–¥", callback_data="bseg_inactive")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    await _safe_edit_text(update.callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=kb)
    return ADMIN_BROADCAST_SEGMENT

async def admin_broadcast_pick(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    seg = update.callback_query.data
    context.user_data["b_segment"] = seg
    await _safe_edit_text(update.callback_query.message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=admin_cancel_kb())
    return ADMIN_BROADCAST_WAIT_TEXT

async def admin_broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    seg = context.user_data.get("b_segment"); txt = (update.message.text or "").strip()
    if not seg or not txt:
        await update.message.reply_text("–ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞.", reply_markup=admin_cancel_kb()); return ADMIN_MENU
    ud_map = context.application.user_data
    sent = 0
    cutoff = datetime.now() - timedelta(days=7)
    for uid, data in list(ud_map.items()):
        if seg == "bseg_free" and data.get("subscription_expires"):
            try:
                if datetime.strptime(data["subscription_expires"], "%Y-%m-%d").date() >= datetime.now().date():
                    continue
            except Exception:
                pass
        if seg == "bseg_subs" and not data.get("subscription_expires"):
            continue
        if seg == "bseg_inactive":
            ls = data.get("last_seen")
            if ls:
                try:
                    if datetime.strptime(ls, "%Y-%m-%d %H:%M:%S") >= cutoff:
                        continue
                except Exception:
                    pass
        try:
            await context.bot.send_message(chat_id=uid, text=txt)
            sent += 1
        except Exception:
            continue
    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}", reply_markup=admin_cancel_kb())
    context.user_data.pop("b_segment", None)
    return ADMIN_MENU

# export users CSV
async def admin_export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    buf = io.StringIO()
    w = csv.writer(buf)
    w.writerow(["id","first_seen","last_seen","username","subscription_expires","tags","refs"])
    for uid, d in context.application.user_data.items():
        w.writerow([uid, d.get("first_seen",""), d.get("last_seen",""),
                    d.get("last_username",""), d.get("subscription_expires",""),
                    "|".join(d.get("tags", [])),
                    "|".join(str(x) for x in d.get("refs", []))])
    byte = io.BytesIO(buf.getvalue().encode("utf-8"))
    byte.name = "users_export.csv"
    await update.callback_query.answer()
    await update.callback_query.message.reply_document(InputFile(byte), caption="–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)")
    return ADMIN_MENU

# set limits
async def admin_setlimit_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await _safe_edit_text(update.callback_query.message, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=admin_cancel_kb())
    return ADMIN_SETLIMIT_WAIT_ID

async def admin_setlimit_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try: target = int((update.message.text or "").strip())
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID.", reply_markup=admin_cancel_kb()); return ADMIN_SETLIMIT_WAIT_ID
    context.user_data["limit_target"] = target
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ‚Äî —Ä–µ—Ä–∞–π—Ç–µ—Ä –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ (—Å–µ–≥–æ–¥–Ω—è):\n–Ω–∞–ø—Ä. 2 1",
                                    reply_markup=admin_cancel_kb())
    return ADMIN_SETLIMIT_WAIT_VALUES

async def admin_setlimit_values(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    target = context.user_data.get("limit_target")
    if target is None:
        await update.message.reply_text("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.", reply_markup=admin_cancel_kb()); return ADMIN_MENU
    parts = (update.message.text or "").split()
    try: c1, c2 = int(parts[0]), int(parts[1])
    except Exception:
        await update.message.reply_text("–ù—É–∂–Ω–æ –¥–≤–∞ —á–∏—Å–ª–∞, –ø—Ä–∏–º–µ—Ä: 3 2", reply_markup=admin_cancel_kb()); return ADMIN_SETLIMIT_WAIT_VALUES
    ud = context.application.user_data.get(target)
    if not ud: await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_cancel_kb()); return ADMIN_MENU
    today = _today()
    u = ud.setdefault("usage", {})
    u["rewriter"]={"count":max(0,c1),"date":today}
    u["literature"]={"count":max(0,c2),"date":today}
    await update.message.reply_text("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=admin_cancel_kb())
    context.user_data.pop("limit_target", None); return ADMIN_MENU

# blacklist / shadowban
async def admin_blacklist_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await _safe_edit_text(update.callback_query.message,
                          "–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –º–∏–Ω—É—Å –ø–µ—Ä–µ–¥ ID):",
                          reply_markup=admin_cancel_kb())
    return ADMIN_BLACKLIST_WAIT_ID

async def admin_blacklist_apply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt = (update.message.text or "").strip()
    bl = context.application.bot_data.setdefault("blacklist", set())
    try:
        if txt.startswith("-"):
            bl.discard(int(txt[1:]))
            await update.message.reply_text("–£–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.", reply_markup=admin_cancel_kb())
        else:
            bl.add(int(txt))
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.", reply_markup=admin_cancel_kb())
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", reply_markup=admin_cancel_kb())
    return ADMIN_MENU

async def admin_shadow_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await _safe_edit_text(update.callback_query.message,
                          "–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —Ç–µ–Ω–µ–≤–æ–≥–æ –±–∞–Ω–∞/—Å–Ω—è—Ç–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –±–ª—ç–∫–ª–∏—Å—Ç—É, -ID ‚Äî —Å–Ω—è—Ç—å):",
                          reply_markup=admin_cancel_kb())
    return ADMIN_SHADOW_WAIT_ID

async def admin_shadow_apply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt = (update.message.text or "").strip()
    sb = context.application.bot_data.setdefault("shadowban", set())
    try:
        if txt.startswith("-"):
            sb.discard(int(txt[1:])); await update.message.reply_text("–¢–µ–Ω–µ–≤–æ–π –±–∞–Ω —Å–Ω—è—Ç.", reply_markup=admin_cancel_kb())
        else:
            sb.add(int(txt)); await update.message.reply_text("–¢–µ–Ω–µ–≤–æ–π –±–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=admin_cancel_kb())
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", reply_markup=admin_cancel_kb())
    return ADMIN_MENU

# ===== CABINET =====
def _next_reset_str() -> str:
    tomorrow = datetime.now().date() + timedelta(days=1)
    return f"{tomorrow.strftime('%d.%m.%Y')} 00:00"

async def cabinet_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id
    used_rew = get_user_usage("rewriter", context)
    used_lit = get_user_usage("literature", context)
    left_rew = remaining_attempts("rewriter", context, uid)
    left_lit = remaining_attempts("literature", context, uid)
    tone = context.user_data.get("tone", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π")
    gost = context.user_data.get("gost", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π")

    if has_active_subscription(context):
        exp = datetime.strptime(context.user_data["subscription_expires"], "%Y-%m-%d").strftime("%d.%m.%Y")
        sub_text = f"‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç –¥–æ {exp}"
        total = 0
    else:
        sub_text = "–±–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø"
        total = get_daily_limit(context)

    pr1 = _progress_bar(used_rew if total else 0, total) if total else "‚àû"
    pr2 = _progress_bar(used_lit if total else 0, total) if total else "‚àû"

    text = (
        "üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        f"<b>ID:</b> <code>{uid}</code>\n"
        f"<b>–î–æ—Å—Ç—É–ø:</b> {sub_text}\n"
        f"<b>–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤:</b> { _next_reset_str() }\n\n"
        f"‚úçÔ∏è –†–µ—Ä–∞–π—Ç–µ—Ä: {pr1} (–æ—Å—Ç: {left_rew})\n"
        f"üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞: {pr2} (–æ—Å—Ç: {left_lit})\n\n"
        f"üó£ –¢–æ–Ω —Ä–µ—Ä–∞–π—Ç–∞: <b>{html.escape(tone)}</b>\n"
        f"üìè –ì–û–°–¢: <b>{html.escape(gost)}</b>"
    )
    if update.callback_query:
        await update.callback_query.answer()
        await _safe_edit_text(update.callback_query.message, text, parse_mode="HTML",
                              reply_markup=cabinet_kb(), disable_web_page_preview=True)
    else:
        await update.effective_message.reply_html(text, reply_markup=cabinet_kb(), disable_web_page_preview=True)
    return CABINET_MENU

async def cabinet_refresh(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await cabinet_open(update, context)

async def cabinet_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query: 
        await update.callback_query.answer(); msg = update.callback_query.message
    else: 
        msg = update.effective_message
    await _safe_edit_text(msg, "üóÇ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</b>\n\n"+_format_history(context,10),
                          parse_mode="HTML", reply_markup=cabinet_kb())
    return CABINET_MENU

async def cabinet_export(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    hist: List[Dict[str, Any]] = context.user_data.get("history", [])
    buf = io.StringIO(); w = csv.writer(buf); w.writerow(["ts","feature","size"])
    for h in hist: w.writerow([h.get("ts",""), h.get("feature",""), h.get("size","")])
    byte = io.BytesIO(buf.getvalue().encode("utf-8")); byte.name="history.csv"
    await update.callback_query.answer()
    await update.callback_query.message.reply_document(InputFile(byte), caption="–ò—Å—Ç–æ—Ä–∏—è (CSV)")
    return CABINET_MENU

# SETTINGS
async def settings_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await _safe_edit_text(update.callback_query.message, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb())
    return SETTINGS_MENU

async def settings_pick(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    data = update.callback_query.data
    if data == "set_tone":
        await _safe_edit_text(update.callback_query.message,
                              "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–Ω —Ä–µ—Ä–∞–π—Ç–∞ (–Ω–∞–ø—Ä.: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π / –Ω–∞—É—á–Ω—ã–π / –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π):",
                              reply_markup=admin_cancel_kb())
        return SETTINGS_TONE_WAIT
    if data == "set_gost":
        await _safe_edit_text(update.callback_query.message,
                              "–í–≤–µ–¥–∏—Ç–µ –ì–û–°–¢ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä.: –†–ê–ù–•–∏–ì–° 2021 / —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π):",
                              reply_markup=admin_cancel_kb())
        return SETTINGS_GOST_WAIT
    return SETTINGS_MENU

async def settings_tone_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["tone"] = (update.message.text or "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π")[:50]
    await update.message.reply_text("‚úÖ –¢–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=back_menu_kb())
    return await cabinet_open(update, context)

async def settings_gost_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["gost"] = (update.message.text or "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π")[:50]
    await update.message.reply_text("‚úÖ –ì–û–°–¢ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=back_menu_kb())
    return await cabinet_open(update, context)

# ===== GOST section =====
async def gost_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    kb = [
        [InlineKeyboardButton("–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å–Ω–æ—Å–∫—É?", callback_data="gost_footnote")],
        [InlineKeyboardButton("–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã?", callback_data="gost_references")],
        [InlineKeyboardButton("–û–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (—à—Ä–∏—Ñ—Ç, –æ—Ç—Å—Ç—É–ø—ã)", callback_data="gost_general")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
    ]
    await _safe_edit_text(q.message,
                          "üìã **–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ì–û–°–¢—É**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
                          reply_markup=InlineKeyboardMarkup(kb), parse_mode="Markdown")
    return GOST_MENU

async def gost_show_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    info_type = q.data
    text = ""
    if info_type == "gost_footnote":
        text = (
            "**üìÑ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–Ω–æ—Å–æ–∫ (–∫—Ä–∞—Ç–∫–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞)**\n\n"
            "–°–Ω–æ—Å–∫–∏ —Å—Ç–∞–≤—è—Ç—Å—è –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ù—É–º–µ—Ä–∞—Ü–∏—è —Å–∫–≤–æ–∑–Ω–∞—è –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É.\n\n"
            "**–ü—Ä–∏–º–µ—Ä (–∫–Ω–∏–≥–∞):**\n"
            "`¬π –ò–≤–∞–Ω–æ–≤ –ò. –ò. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏. ‚Äì –ú.: –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, 2023. ‚Äì –°. 45.`\n\n"
            "**–ü—Ä–∏–º–µ—Ä (—Å—Ç–∞—Ç—å—è):**\n"
            "`¬≤ –ü–µ—Ç—Ä–æ–≤ –ü. –ü. –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ // –ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞. ‚Äì 2022. ‚Äì ‚Ññ 2. ‚Äì –°. 12-15.`\n\n"
            "**–ü—Ä–∏–º–µ—Ä (–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å):**\n"
            "`¬≥ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ [–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å]. ‚Äì –†–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–∞: http://example.com (–¥–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: 23.08.2025).`"
        )
    elif info_type == "gost_references":
        text = (
            "**üìö –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã**\n\n"
            "–°–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∞–≤—Ç–æ—Ä–∞. –°–Ω–∞—á–∞–ª–∞ –∏–¥—É—Ç —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∑–∞—Ç–µ–º –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ.\n\n"
            "**–ü—Ä–∏–º–µ—Ä (–∫–Ω–∏–≥–∞):**\n"
            "`–ò–≤–∞–Ω–æ–≤, –ò. –ò. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ / –ò. –ò. –ò–≤–∞–Ω–æ–≤. ‚Äì –ú–æ—Å–∫–≤–∞ : –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, 2023. ‚Äì 250 —Å.`\n\n"
            "**–ü—Ä–∏–º–µ—Ä (—Å—Ç–∞—Ç—å—è):**\n"
            "`–ü–µ—Ç—Ä–æ–≤, –ü. –ü. –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ / –ü. –ü. –ü–µ—Ç—Ä–æ–≤ // –ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞. ‚Äì 2022. ‚Äì ‚Ññ 2. ‚Äì –°. 12‚Äì15.`"
        )
    elif info_type == "gost_general":
        text = (
            "**‚öôÔ∏è –û–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é**\n\n"
            "‚Ä¢ **–®—Ä–∏—Ñ—Ç:** Times New Roman, 14 –ø—Ç.\n"
            "‚Ä¢ **–ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:** –ü–æ–ª—É—Ç–æ—Ä–Ω—ã–π (1,5).\n"
            "‚Ä¢ **–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ:** –ü–æ —à–∏—Ä–∏–Ω–µ.\n"
            "‚Ä¢ **–û—Ç—Å—Ç—É–ø –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–∫—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞):** 1,25 —Å–º.\n"
            "‚Ä¢ **–ü–æ–ª—è:** –ª–µ–≤–æ–µ ‚Äì 3 —Å–º, –ø—Ä–∞–≤–æ–µ ‚Äì 1 —Å–º, –≤–µ—Ä—Ö–Ω–µ–µ –∏ –Ω–∏–∂–Ω–µ–µ ‚Äì 2 —Å–º.\n\n"
            "*–í–Ω–∏–º–∞–Ω–∏–µ: –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—è–π—Ç–µ—Å—å —Å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–º–∏ —É–∫–∞–∑–∞–Ω–∏—è–º–∏ –≤–∞—à–µ–≥–æ –≤—É–∑–∞, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!*"
        )
    await _safe_edit_text(q.message, text,
                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="gost_back")]]),
                          parse_mode="Markdown")
    return GOST_MENU

# ===== TOOLS =====
SIGNATURE_MD_V2 = (
    "\\-\\-\\-\n"
    "‚ÑπÔ∏è *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä–æ–º –í–ª–∞–¥–∏—Å–ª–∞–≤–æ–º\\.*\n"
    "‚û°Ô∏è *[–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π](https://t.me/V_L_A_D_IS_L_A_V)*"
)

async def rewriter_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; uid = update.effective_user.id; await q.answer()
    if _is_blacklisted(context.application, uid): await q.message.edit_text("üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."); return MAIN_MENU
    if _is_shadowbanned(context.application, uid): await q.message.edit_text("–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω."); return MAIN_MENU

    if not is_admin(uid) and not has_active_subscription(context):
        limit = get_daily_limit(context)
        if get_user_usage("rewriter", context) >= limit:
            await _safe_edit_text(q.message,
                "üö´ <b>–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n"
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ: <a href='https://t.me/V_L_A_D_IS_L_A_V'>@V_L_A_D_IS_L_A_V</a>\n"
                f"–í–∞—à ID: <code>{uid}</code>", parse_mode="HTML", reply_markup=contact_kb())
            return MAIN_MENU
    left = remaining_attempts("rewriter", context, uid)
    await _safe_edit_text(q.message,
        "‚úçÔ∏è *AI-–†–µ—Ä–∞–π—Ç–µ—Ä*\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤).\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–≥–æ–¥–Ω—è: *{left}*", parse_mode="Markdown", reply_markup=back_menu_kb())
    return REWRITER_TEXT_INPUT

async def literature_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; uid = update.effective_user.id; await q.answer()
    if _is_blacklisted(context.application, uid): await q.message.edit_text("üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."); return MAIN_MENU
    if _is_shadowbanned(context.application, uid): await q.message.edit_text("–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω."); return MAIN_MENU

    if not is_admin(uid) and not has_active_subscription(context):
        limit = get_daily_limit(context)
        if get_user_usage("literature", context) >= limit:
            await _safe_edit_text(q.message,
                "üö´ <b>–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n"
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ: <a href='https://t.me/V_L_A_D_IS_L_A_V'>@V_L_A_D_IS_L_A_V</a>\n"
                f"–í–∞—à ID: <code>{uid}</code>", parse_mode="HTML", reply_markup=contact_kb())
            return MAIN_MENU
    left = remaining_attempts("literature", context, uid)
    await _safe_edit_text(q.message,
        "üìö *–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã*\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É.\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–≥–æ–¥–Ω—è: *{left}*", parse_mode="Markdown", reply_markup=back_menu_kb())
    return LITERATURE_TOPIC_INPUT

async def rewriter_process_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    _touch_seen(update, context)
    uid = update.effective_user.id
    ok_rl, wait = _rate_limit_ok(context)
    if not ok_rl:
        await update.message.reply_text(f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {wait} —Å–µ–∫.")
        return REWRITER_TEXT_INPUT

    if not is_admin(uid) and not has_active_subscription(context):
        limit = get_daily_limit(context)
        if get_user_usage("rewriter", context) >= limit:
            await update.message.reply_html(
                "üö´ <b>–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n"
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ: <a href='https://t.me/V_L_A_D_IS_L_A_V'>@V_L_A_D_IS_L_A_V</a>\n"
                f"–í–∞—à ID: <code>{uid}</code>", reply_markup=contact_kb())
            return REWRITER_TEXT_INPUT

    user_text = (update.message.text or "")[:2000]
    context.user_data["last_request"] = {"feature":"rewriter","len":len(user_text),"ts":datetime.now().isoformat()}

    processing = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶")
    tone = context.user_data.get("tone", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π")
    prompt = (
        f"–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ {tone} –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ; —Å–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–ø–∏—Å–∫–∏; "
        "—É–ª—É—á—à–∏ —Å–≤—è–∑–Ω–æ—Å—Ç—å; —á–∏—Å–ª–∞ –≤ —Ñ–∏–Ω—á–∞—Å—Ç–∏ —á–∞—Å—Ç–∏—á–Ω–æ/–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª–æ–≤–∞–º–∏; –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. \n\n"
        f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\"\"\"\n{user_text}\n\"\"\""
    )
    txt = await call_gemini(prompt)

    success = not (txt.startswith("–û—à–∏–±–∫–∞") or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç" in txt)
    _record_ai_stat(context.application, success)
    if success and (not is_admin(uid)) and not has_active_subscription(context):
        increment_usage("rewriter", context)
    if success:
        _push_history(context, "rewriter", len(user_text))

    left = remaining_attempts("rewriter", context, uid)
    escaped = escape_markdown(txt, version=2)
    footer = f"\n\n*–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–≥–æ–¥–Ω—è:* {left if left.startswith('‚àû') else f'*{left}*'}"
    full = f"*–ì–æ—Ç–æ–≤–æ\\! –í–æ—Ç –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:*\n\n{escaped}{footer}\n\n{SIGNATURE_MD_V2}"
    await _md2_send_chunks(processing, full, markup=back_menu_kb())
    return REWRITER_TEXT_INPUT

async def literature_process_topic(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    _touch_seen(update, context)
    uid = update.effective_user.id
    ok_rl, wait = _rate_limit_ok(context)
    if not ok_rl:
        await update.message.reply_text(f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {wait} —Å–µ–∫.")
        return LITERATURE_TOPIC_INPUT

    if not is_admin(uid) and not has_active_subscription(context):
        limit = get_daily_limit(context)
        if get_user_usage("literature", context) >= limit:
            await update.message.reply_html(
                "üö´ <b>–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n"
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ: <a href='https://t.me/V_L_A_D_IS_L_A_V'>@V_L_A_D_IS_L_A_V</a>\n"
                f"–í–∞—à ID: <code>{uid}</code>", reply_markup=contact_kb())
            return LITERATURE_TOPIC_INPUT

    topic = (update.message.text or "")[:500]
    context.user_data["last_request"] = {"feature":"literature","len":len(topic),"ts":datetime.now().isoformat()}
    processing = await update.message.reply_text("üìö –ü–æ–¥–±–∏—Ä–∞—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏‚Ä¶")

    prompt = ("–¢—ã ‚Äî AI-—ç–∫—Å–ø–µ—Ä—Ç-–±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ. –°–æ—Å—Ç–∞–≤—å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 5‚Äì7 –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ "
              "(–∫–Ω–∏–≥–∏, —Å—Ç–∞—Ç—å–∏) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ; –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∫–∞–∂–∏ –∞–≤—Ç–æ—Ä–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, –≥–æ–¥.\n\n"
              f"–¢–µ–º–∞: \"{topic}\"")
    txt = await call_gemini(prompt)
    success = not _no_literature_found(txt)
    _record_ai_stat(context.application, success)

    if not success:
        await processing.edit_text(
            "üòï <b>–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞—à–ª–∏—Å—å</b>\n\n"
            "–°—É–∑—å—Ç–µ —Ç–µ–º—É (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –≥–æ–¥—ã/—Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ ‚Äî –ø–æ–º–æ–≥—É –≤—Ä—É—á–Ω—É—é:\n"
            "<a href='https://t.me/V_L_A_D_IS_L_A_V'>@V_L_A_D_IS_L_A_V</a>",
            parse_mode="HTML", reply_markup=contact_kb(), disable_web_page_preview=True
        )
        return LITERATURE_TOPIC_INPUT

    if (not is_admin(uid)) and not has_active_subscription(context):
        increment_usage("literature", context)
    _push_history(context, "literature", len(topic))

    left = remaining_attempts("literature", context, uid)
    escaped = escape_markdown(txt, version=2)
    footer = f"\n\n*–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–≥–æ–¥–Ω—è:* {left if left.startswith('‚àû') else f'*{left}*'}"
    full = f"*–ì–æ—Ç–æ–≤–æ\\! –í–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã:*\n\n{escaped}{footer}\n\n{SIGNATURE_MD_V2}"
    await _md2_send_chunks(processing, full, markup=back_menu_kb())
    return LITERATURE_TOPIC_INPUT

# ===== CABINET - REFERRALS =====
async def cabinet_ref(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    uid = update.effective_user.id
    bot_user = await _ensure_bot_username(context)
    link = f"https://t.me/{bot_user}?start=ref_{uid}"
    refs = context.user_data.get("refs", [])
    cnt = len(refs) if isinstance(refs, list) else 0
    text = (
        "üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n<code>{html.escape(link)}</code>\n\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äî <b>+{REF_BONUS_DAYS} –¥.</b> –±–µ–∑–ª–∏–º–∏—Ç–∞.\n"
        f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –ø–æ–ª—É—á–∏—Ç <b>+{REF_WELCOME_ATTEMPTS}</b> –¥–æ–ø. –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
        f"<b>–£–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> {cnt}\n"
        f"{'ID: ' + ', '.join(str(x) for x in refs) if cnt else ''}"
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=link)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cabinet")]
    ])
    await _safe_edit_text(update.callback_query.message, text, parse_mode="HTML",
                          reply_markup=kb, disable_web_page_preview=True)
    return CABINET_REF_MENU

# ===== CANCEL & ERRORS =====
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.effective_message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=back_menu_kb())
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("Unhandled exception", exc_info=context.error)
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text("–£–ø—Å! –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
    except Exception:
        pass

# ===== MAIN =====
def main() -> None:
    if not BOT_TOKEN: raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env/.evn")
    if not GEMINI_API_KEY: logger.warning("GEMINI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî AI-—Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.")

    try:
        persistence = PicklePersistence(filepath="bot_persistence")
    except TypeError:
        try: persistence = PicklePersistence(filename="bot_persistence")
        except TypeError: persistence = PicklePersistence("bot_persistence")

    app = Application.builder().token(BOT_TOKEN).persistence(persistence).build()
    app.add_error_handler(error_handler)

    # text commands
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("service", service_cmd))
    app.add_handler(CommandHandler("report", report_cmd))
    app.add_handler(CommandHandler("status", check_status))
    app.add_handler(CommandHandler("reset", reset_limit))
    app.add_handler(CommandHandler("addsub", add_subscription))
    app.add_handler(CommandHandler("delsub", del_subscription))

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(rewriter_start, pattern="^rewriter$"),
                CallbackQueryHandler(literature_start, pattern="^literature$"),
                CallbackQueryHandler(gost_menu, pattern="^gost$"),
                CallbackQueryHandler(cabinet_open, pattern="^cabinet$"),
                CallbackQueryHandler(admin_panel_open, pattern="^admin_panel$"),
                CallbackQueryHandler(start, pattern="^back_to_main_menu$"),
            ],
            REWRITER_TEXT_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, rewriter_process_text),
                CallbackQueryHandler(start, pattern="^back_to_main_menu$"),
            ],
            LITERATURE_TOPIC_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, literature_process_topic),
                CallbackQueryHandler(start, pattern="^back_to_main_menu$"),
            ],
            GOST_MENU: [
                CallbackQueryHandler(gost_show_info, pattern="^gost_(footnote|references|general)$"),
                CallbackQueryHandler(gost_menu, pattern="^gost_back$"),
                CallbackQueryHandler(start, pattern="^back_to_main_menu$"),
            ],
            CABINET_MENU: [
                CallbackQueryHandler(cabinet_history, pattern="^cab_history$"),
                CallbackQueryHandler(cabinet_export, pattern="^cab_export$"),
                CallbackQueryHandler(cabinet_refresh, pattern="^cab_refresh$"),
                CallbackQueryHandler(settings_open, pattern="^cab_settings$"),
                CallbackQueryHandler(cabinet_ref, pattern="^cab_ref$"),
                CallbackQueryHandler(start, pattern="^back_to_main_menu$"),
            ],
            CAPTCHA_WAIT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, captcha_check),
                CommandHandler("start", start),
            ],
            SETTINGS_MENU: [
                CallbackQueryHandler(settings_pick, pattern="^(set_tone|set_gost)$"),
                CallbackQueryHandler(cabinet_open, pattern="^cabinet$"),
                CallbackQueryHandler(start, pattern="^back_to_main_menu$"),
            ],
            SETTINGS_TONE_WAIT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, settings_tone_save),
            ],
            SETTINGS_GOST_WAIT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, settings_gost_save),
            ],
            ADMIN_MENU: [
                CallbackQueryHandler(admin_reset_start, pattern="^admin_reset$"),
                CallbackQueryHandler(admin_addsub_start, pattern="^admin_addsub$"),
                CallbackQueryHandler(admin_delsub_start, pattern="^admin_delsub$"),
                CallbackQueryHandler(admin_status_start, pattern="^admin_status$"),
                CallbackQueryHandler(admin_search_start, pattern="^admin_search$"),
                CallbackQueryHandler(admin_tags_start, pattern="^admin_tags$"),
                CallbackQueryHandler(admin_broadcast_start, pattern="^admin_broadcast$"),
                CallbackQueryHandler(admin_export_csv, pattern="^admin_export$"),
                CallbackQueryHandler(admin_blacklist_start, pattern="^admin_blacklist$"),
                CallbackQueryHandler(admin_shadow_start, pattern="^admin_shadow$"),
                CallbackQueryHandler(admin_setlimit_start, pattern="^admin_setlimit$"),
                CallbackQueryHandler(admin_panel_open, pattern="^admin_panel$"),
                CallbackQueryHandler(start, pattern="^back_to_main_menu$"),
            ],
            ADMIN_RESET_WAIT_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_reset_receive_id),
            ],
            ADMIN_ADDSUB_WAIT_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_addsub_receive_id),
            ],
            ADMIN_ADDSUB_WAIT_DAYS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_addsub_receive_days),
            ],
            ADMIN_STATUS_WAIT_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_status_receive_id),
            ],
            ADMIN_DELSUB_WAIT_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_delsub_receive_id),
            ],
            ADMIN_SEARCH_WAIT_QUERY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_search_do),
            ],
            ADMIN_TAGS_WAIT_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_tags_id),
            ],
            ADMIN_TAGS_WAIT_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_tags_set),
            ],
            ADMIN_BROADCAST_SEGMENT: [
                CallbackQueryHandler(admin_broadcast_pick, pattern="^bseg_(all|free|subs|inactive)$"),
                CallbackQueryHandler(admin_panel_open, pattern="^admin_panel$"),
            ],
            ADMIN_BROADCAST_WAIT_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_send),
            ],
            ADMIN_SETLIMIT_WAIT_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_setlimit_id),
            ],
            ADMIN_SETLIMIT_WAIT_VALUES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_setlimit_values),
            ],
            ADMIN_BLACKLIST_WAIT_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_blacklist_apply),
            ],
            ADMIN_SHADOW_WAIT_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_shadow_apply),
            ],
            CABINET_REF_MENU: [
                CallbackQueryHandler(cabinet_open, pattern="^cabinet$"),
                CallbackQueryHandler(start, pattern="^back_to_main_menu$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("start", start)],
        allow_reentry=True, persistent=True, name="main_conversation"
    )

    app.add_handler(conv)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
